import"./modulepreload-polyfill-3cfb730f.js";import{M as Re,c as Ht,B as te,K as Dt,a as tt,a2 as _e,f as qt,z as Lt,S as qe,P as Le,k as Oe,e as ke,h as We,W as Ve,j as je}from"./three.module-26828fde.js";import{i as Ge}from"./dat.gui.module-dd30c9f2.js";import{O as He}from"./OrbitControls-2d8a967e.js";/* empty css              */class K{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new c);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new c);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new K);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],l=s[2],a=s[3],d=s[4],u=s[5],h=s[6],f=s[7],p=s[8],y=n[0],v=n[1],w=n[2],m=n[3],b=n[4],E=n[5],A=n[6],N=n[7],P=n[8];return i[0]=o*y+r*m+l*A,i[1]=o*v+r*b+l*N,i[2]=o*w+r*E+l*P,i[3]=a*y+d*m+u*A,i[4]=a*v+d*b+u*N,i[5]=a*w+d*E+u*P,i[6]=h*y+f*m+p*A,i[7]=h*v+f*b+p*N,i[8]=h*w+f*E+p*P,e}scale(t,e){e===void 0&&(e=new K);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new c);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let l=3;const a=l;let d;const u=4;let h;do{if(o=a-l,i[o+n*o]===0){for(r=o+1;r<a;r++)if(i[o+n*r]!==0){d=u;do h=u-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<a;r++){const f=i[o+n*r]/i[o+n*o];d=u;do h=u-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--d)}}while(--l);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new K);const e=3,s=6,n=De;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const l=r;let a;const d=s;let u;do{if(i=l-r,n[i+s*i]===0){for(o=i+1;o<l;o++)if(n[i+s*o]!==0){a=d;do u=d-a,n[u+s*i]+=n[u+s*o];while(--a);break}}if(n[i+s*i]!==0)for(o=i+1;o<l;o++){const h=n[i+s*o]/n[i+s*i];a=d;do u=d-a,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*h;while(--a)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];a=s;do u=s-a,n[u+s*o]=n[u+s*o]-n[u+s*i]*h;while(--a)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];a=s;do u=s-a,n[u+s*i]=n[u+s*i]*h;while(--a)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,l=n+n,a=e*o,d=e*r,u=e*l,h=s*r,f=s*l,p=n*l,y=i*o,v=i*r,w=i*l,m=this.elements;return m[3*0+0]=1-(h+p),m[3*0+1]=d-w,m[3*0+2]=u+v,m[3*1+0]=d+w,m[3*1+1]=1-(a+p),m[3*1+2]=f-y,m[3*2+0]=u-v,m[3*2+1]=f+y,m[3*2+2]=1-(a+h),this}transpose(t){t===void 0&&(t=new K);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const De=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class c{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,l=this.z;return e.x=r*i-l*n,e.y=l*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new c(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new c(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new K([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new c);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new c);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new c),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new c),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new c),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=Ye,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=Xe;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(ee),ee.almostEquals(t,e)}clone(){return new c(this.x,this.y,this.z)}}c.ZERO=new c(0,0,0);c.UNIT_X=new c(1,0,0);c.UNIT_Y=new c(0,1,0);c.UNIT_Z=new c(0,0,1);const Ye=new c,Xe=new c,ee=new c;class U{constructor(t){t===void 0&&(t={}),this.lowerBound=new c,this.upperBound=new c,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let l=1;l<t.length;l++){let a=t[l];r&&(r.vmult(a,se),a=se),a.x>o.x&&(o.x=a.x),a.x<i.x&&(i.x=a.x),a.y>o.y&&(o.y=a.y),a.y<i.y&&(i.y=a.y),a.z>o.z&&(o.z=a.z),a.z<i.z&&(i.z=a.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new U().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,l=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&l}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,l){const a=this.lowerBound,d=this.upperBound;t.copy(a),e.set(d.x,a.y,a.z),s.set(d.x,d.y,a.z),n.set(a.x,d.y,d.z),i.set(d.x,a.y,d.z),o.set(a.x,d.y,a.z),r.set(a.x,a.y,d.z),l.copy(d)}toLocalFrame(t,e){const s=ne,n=s[0],i=s[1],o=s[2],r=s[3],l=s[4],a=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,l,a,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=ne,n=s[0],i=s[1],o=s[2],r=s[3],l=s[4],a=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,l,a,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,l=(this.upperBound.x-s.x)*n,a=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,l),Math.min(a,d)),Math.min(u,h)),p=Math.min(Math.min(Math.max(r,l),Math.max(a,d)),Math.max(u,h));return!(p<0||f>p)}}const se=new c,ne=[new c,new c,new c,new c,new c,new c,new c,new c];class ie{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class ge{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class j{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new c),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=Ue,n=$e;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new j);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,l=t.y,a=t.z,d=t.w;return e.x=s*d+o*r+n*a-i*l,e.y=n*d+o*l+i*r-s*a,e.z=i*d+o*a+s*l-n*r,e.w=o*d-s*r-n*l-i*a,e}inverse(t){t===void 0&&(t=new j);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new j),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,l=this.z,a=this.w,d=a*s+r*i-l*n,u=a*n+l*s-o*i,h=a*i+o*n-r*s,f=-o*s-r*n-l*i;return e.x=d*a+f*-o+u*-l-h*-r,e.y=u*a+f*-r+h*-o-d*-l,e.z=h*a+f*-l+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,l=this.z,a=this.w;switch(e){case"YZX":const d=o*r+l*a;if(d>.499&&(s=2*Math.atan2(o,a),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,a),n=-Math.PI/2,i=0),s===void 0){const u=o*o,h=r*r,f=l*l;s=Math.atan2(2*r*a-2*o*l,1-2*h-2*f),n=Math.asin(2*d),i=Math.atan2(2*o*a-2*r*l,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),l=Math.sin(t/2),a=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=l*o*r+i*a*d,this.y=i*a*r-l*o*d,this.z=i*o*d+l*a*r,this.w=i*o*r-l*a*d):n==="YXZ"?(this.x=l*o*r+i*a*d,this.y=i*a*r-l*o*d,this.z=i*o*d-l*a*r,this.w=i*o*r+l*a*d):n==="ZXY"?(this.x=l*o*r-i*a*d,this.y=i*a*r+l*o*d,this.z=i*o*d+l*a*r,this.w=i*o*r-l*a*d):n==="ZYX"?(this.x=l*o*r-i*a*d,this.y=i*a*r+l*o*d,this.z=i*o*d-l*a*r,this.w=i*o*r+l*a*d):n==="YZX"?(this.x=l*o*r+i*a*d,this.y=i*a*r+l*o*d,this.z=i*o*d-l*a*r,this.w=i*o*r-l*a*d):n==="XZY"&&(this.x=l*o*r-i*a*d,this.y=i*a*r-l*o*d,this.z=i*o*d+l*a*r,this.w=i*o*r+l*a*d),this}clone(){return new j(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new j);const n=this.x,i=this.y,o=this.z,r=this.w;let l=t.x,a=t.y,d=t.z,u=t.w,h,f,p,y,v;return f=n*l+i*a+o*d+r*u,f<0&&(f=-f,l=-l,a=-a,d=-d,u=-u),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),y=Math.sin((1-e)*h)/p,v=Math.sin(e*h)/p):(y=1-e,v=e),s.x=y*n+v*l,s.y=y*i+v*a,s.z=y*o+v*d,s.w=y*r+v*u,s}integrate(t,e,s,n){n===void 0&&(n=new j);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,l=this.x,a=this.y,d=this.z,u=this.w,h=e*.5;return n.x+=h*(i*u+o*d-r*a),n.y+=h*(o*u+r*l-i*d),n.z+=h*(r*u+i*a-o*l),n.w+=h*(-i*l-o*a-r*d),n}}const Ue=new c,$e=new c,Ke={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class I{constructor(t){t===void 0&&(t={}),this.id=I.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}I.idCounter=0;I.types=Ke;class W{constructor(t){t===void 0&&(t={}),this.position=new c,this.quaternion=new j,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return W.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return W.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),s.vsub(t,n),e.conjugate(oe),oe.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new c),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new c),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const oe=new j;class yt extends I{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:I.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new c;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let l=0;l!==r;l++){const a=(l+1)%r;e[o[l]].vsub(e[o[a]],n),n.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new c;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];yt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new c,o=new c;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,l,a){const d=new c;let u=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){d.copy(s.faceNormals[p]),i.vmult(d,d);const y=d.dot(o);y>h&&(h=y,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const y=s.vertices[s.faces[u][p]],v=new c;v.copy(y),i.vmult(v,v),n.vadd(v,v),f.push(v)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,l,a)}findSeparatingAxis(t,e,s,n,i,o,r,l){const a=new c,d=new c,u=new c,h=new c,f=new c,p=new c;let y=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let w=0;w!==v.uniqueAxes.length;w++){s.vmult(v.uniqueAxes[w],a);const m=v.testSepAxis(a,t,e,s,n,i);if(m===!1)return!1;m<y&&(y=m,o.copy(a))}else{const w=r?r.length:v.faces.length;for(let m=0;m<w;m++){const b=r?r[m]:m;a.copy(v.faceNormals[b]),s.vmult(a,a);const E=v.testSepAxis(a,t,e,s,n,i);if(E===!1)return!1;E<y&&(y=E,o.copy(a))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const m=v.testSepAxis(d,t,e,s,n,i);if(m===!1)return!1;m<y&&(y=m,o.copy(d))}else{const w=l?l.length:t.faces.length;for(let m=0;m<w;m++){const b=l?l[m]:m;d.copy(t.faceNormals[b]),i.vmult(d,d);const E=v.testSepAxis(d,t,e,s,n,i);if(E===!1)return!1;E<y&&(y=E,o.copy(d))}}for(let w=0;w!==v.uniqueEdges.length;w++){s.vmult(v.uniqueEdges[w],h);for(let m=0;m!==t.uniqueEdges.length;m++)if(i.vmult(t.uniqueEdges[m],f),h.cross(f,p),!p.almostZero()){p.normalize();const b=v.testSepAxis(p,t,e,s,n,i);if(b===!1)return!1;b<y&&(y=b,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;yt.project(r,t,s,n,Ot),yt.project(e,t,i,o,kt);const l=Ot[0],a=Ot[1],d=kt[0],u=kt[1];if(l<u||d<a)return!1;const h=l-u,f=d-a;return h<f?h:f}calculateLocalInertia(t,e){const s=new c,n=new c;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const l=new c,a=new c,d=new c,u=new c,h=new c,f=new c,p=new c,y=new c,v=this,w=[],m=n,b=w;let E=-1,A=Number.MAX_VALUE;for(let B=0;B<v.faces.length;B++){l.copy(v.faceNormals[B]),s.vmult(l,l);const R=l.dot(t);R<A&&(A=R,E=B)}if(E<0)return;const N=v.faces[E];N.connectedFaces=[];for(let B=0;B<v.faces.length;B++)for(let R=0;R<v.faces[B].length;R++)N.indexOf(v.faces[B][R])!==-1&&B!==E&&N.connectedFaces.indexOf(B)===-1&&N.connectedFaces.push(B);const P=N.length;for(let B=0;B<P;B++){const R=v.vertices[N[B]],T=v.vertices[N[(B+1)%P]];R.vsub(T,a),d.copy(a),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[E]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),f.copy(R),s.vmult(f,f),e.vadd(f,f);const x=N.connectedFaces[B];p.copy(this.faceNormals[x]);const M=this.getPlaneConstantOfFace(x);y.copy(p),s.vmult(y,y);const S=M-y.dot(e);for(this.clipFaceAgainstPlane(m,b,y,S);m.length;)m.shift();for(;b.length;)m.push(b.shift())}p.copy(this.faceNormals[E]);const z=this.getPlaneConstantOfFace(E);y.copy(p),s.vmult(y,y);const C=z-y.dot(e);for(let B=0;B<m.length;B++){let R=y.dot(m[B])+C;if(R<=i&&(console.log(`clamped: depth=${R} to minDist=${i}`),R=i),R<=o){const T=m[B];if(R<=1e-6){const x={point:T,normal:y,depth:R};r.push(x)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let l=t[t.length-1],a=t[0];i=s.dot(l)+n;for(let d=0;d<r;d++){if(a=t[d],o=s.dot(a)+n,i<0)if(o<0){const u=new c;u.copy(a),e.push(u)}else{const u=new c;l.lerp(a,i/(i-o),u),e.push(u)}else if(o<0){const u=new c;l.lerp(a,i/(i-o),u),e.push(u),e.push(a)}l=a,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new c);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new c);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,l,a,d,u,h=new c;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(a===void 0||p.x>a)&&(a=p.x),(r===void 0||p.y<r)&&(r=p.y),(d===void 0||p.y>d)&&(d=p.y),(l===void 0||p.z<l)&&(l=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,l),n.set(a,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new c);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new c;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let l=n[r];const a=e[s[r][0]],d=new c;t.vsub(a,d);const u=l.dot(d),h=new c;o.vsub(a,h);const f=l.dot(h);if(u<0&&f>0||u>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=Ze;let l=0,a=0;const d=Je,u=t.vertices;d.setZero(),W.vectorToLocalFrame(s,n,e,r),W.pointToLocalFrame(s,n,d,d);const h=d.dot(r);a=l=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>l&&(l=p),p<a&&(a=p)}if(a-=h,l-=h,a>l){const f=a;a=l,l=f}i[0]=l,i[1]=a}}const Ot=[],kt=[];new c;const Ze=new c,Je=new c;class Xt extends I{constructor(t){super({type:I.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=c,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],l=new yt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=l,l.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new c),Xt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)rt.set(i[o][0],i[o][1],i[o][2]),e.vmult(rt,rt),t.vadd(rt,rt),s(rt.x,rt.y,rt.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;Z[0].set(i.x,i.y,i.z),Z[1].set(-i.x,i.y,i.z),Z[2].set(-i.x,-i.y,i.z),Z[3].set(-i.x,-i.y,-i.z),Z[4].set(i.x,-i.y,-i.z),Z[5].set(i.x,i.y,-i.z),Z[6].set(-i.x,i.y,-i.z),Z[7].set(i.x,-i.y,i.z);const o=Z[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const l=Z[r];e.vmult(l,l),t.vadd(l,l);const a=l.x,d=l.y,u=l.z;a>n.x&&(n.x=a),d>n.y&&(n.y=d),u>n.z&&(n.z=u),a<s.x&&(s.x=a),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const rt=new c,Z=[new c,new c,new c,new c,new c,new c,new c,new c],Ut={DYNAMIC:1,STATIC:2,KINEMATIC:4},$t={AWAKE:0,SLEEPY:1,SLEEPING:2};class F extends ge{constructor(t){t===void 0&&(t={}),super(),this.id=F.idCounter++,this.index=-1,this.world=null,this.vlambda=new c,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new c,this.previousPosition=new c,this.interpolatedPosition=new c,this.initPosition=new c,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new c,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new c,this.force=new c;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?F.STATIC:F.DYNAMIC,typeof t.type==typeof F.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=F.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new c,this.quaternion=new j,this.initQuaternion=new j,this.previousQuaternion=new j,this.interpolatedQuaternion=new j,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new c,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new c,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new c,this.invInertia=new c,this.invInertiaWorld=new K,this.invMassSolve=0,this.invInertiaSolve=new c,this.invInertiaWorldSolve=new K,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new c(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new c(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new U,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new c,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=F.AWAKE,this.wakeUpAfterNarrowphase=!1,t===F.SLEEPING&&this.dispatchEvent(F.wakeupEvent)}sleep(){this.sleepState=F.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===F.AWAKE&&s<n?(this.sleepState=F.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(F.sleepyEvent)):e===F.SLEEPY&&s>n?this.wakeUp():e===F.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(F.sleepEvent))}}updateSolveMassProperties(){this.sleepState===F.SLEEPING||this.type===F.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new c),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new c),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new c,i=new j;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),l=o.boundingSphereRadius;r+l>n&&(n=r+l)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=Qe,o=ts,r=this.quaternion,l=this.aabb,a=es;for(let d=0;d!==n;d++){const u=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),u.calculateWorldAABB(i,o,a.lowerBound,a.upperBound),d===0?l.copy(a):l.extend(a)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=ss,n=ns;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new c),this.type!==F.DYNAMIC)return;this.sleepState===F.SLEEPING&&this.wakeUp();const s=os;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new c),this.type!==F.DYNAMIC)return;const s=rs,n=cs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===F.DYNAMIC&&(this.sleepState===F.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new c),this.type!==F.DYNAMIC)return;this.sleepState===F.SLEEPING&&this.wakeUp();const s=e,n=ls;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=as;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new c),this.type!==F.DYNAMIC)return;const s=hs,n=ds;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=us;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Xt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new c;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===F.DYNAMIC||this.type===F.KINEMATIC)||this.sleepState===F.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,l=this.torque,a=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,f=d*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const p=u.elements,y=this.angularFactor,v=l.x*y.x,w=l.y*y.y,m=l.z*y.z;i.x+=t*(p[0]*v+p[1]*w+p[2]*m),i.y+=t*(p[3]*v+p[4]*w+p[5]*m),i.z+=t*(p[6]*v+p[7]*w+p[8]*m),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,a.integrate(this.angularVelocity,t,this.angularFactor,a),e&&(s?a.normalizeFast():a.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}F.idCounter=0;F.COLLIDE_EVENT_NAME="collide";F.DYNAMIC=Ut.DYNAMIC;F.STATIC=Ut.STATIC;F.KINEMATIC=Ut.KINEMATIC;F.AWAKE=$t.AWAKE;F.SLEEPY=$t.SLEEPY;F.SLEEPING=$t.SLEEPING;F.wakeupEvent={type:"wakeup"};F.sleepyEvent={type:"sleepy"};F.sleepEvent={type:"sleep"};const Qe=new c,ts=new j,es=new U,ss=new K,ns=new K,is=new K,os=new c,rs=new c,cs=new c,ls=new c,as=new c,hs=new c,ds=new c,us=new c;class ps{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&F.STATIC||t.sleepState===F.SLEEPING)&&(e.type&F.STATIC||e.sleepState===F.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=fs;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=ms,n=vs,i=ys,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const l=n[r].id,a=i[r].id,d=l<a?`${l},${a}`:`${a},${l}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const l=s.keys.pop(),a=s[l];t.push(n[a]),e.push(i[a]),delete s[l]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new c;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const fs=new c;new c;new j;new c;const ms={keys:[]},vs=[],ys=[];new c;new c;new c;class ws extends ps{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let l=0;l!==i;l++)for(let a=0;a!==l;a++)o=n[l],r=n[a],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class Tt{constructor(){this.rayFromWorld=new c,this.rayToWorld=new c,this.hitNormalWorld=new c,this.hitPointWorld=new c,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let be,Ee,ze,Ce,Se,Ae,Me;const Kt={CLOSEST:1,ANY:2,ALL:4};be=I.types.SPHERE;Ee=I.types.PLANE;ze=I.types.BOX;Ce=I.types.CYLINDER;Se=I.types.CONVEXPOLYHEDRON;Ae=I.types.HEIGHTFIELD;Me=I.types.TRIMESH;class G{get[be](){return this._intersectSphere}get[Ee](){return this._intersectPlane}get[ze](){return this._intersectBox}get[Ce](){return this._intersectConvex}get[Se](){return this._intersectConvex}get[Ae](){return this._intersectHeightfield}get[Me](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new c),e===void 0&&(e=new c),this.from=t.clone(),this.to=e.clone(),this.direction=new c,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=G.ANY,this.result=new Tt,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||G.ANY,this.result=e.result||new Tt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(re),Wt.length=0,t.broadphase.aabbQuery(t,re,Wt),this.intersectBodies(Wt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const n=xs,i=gs;for(let o=0,r=t.shapes.length;o<r;o++){const l=t.shapes[o];if(!(s&&!l.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(l,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(Rs(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,l=this.direction,a=new c(0,0,1);e.vmult(a,a);const d=new c;o.vsub(s,d);const u=d.dot(a);r.vsub(s,d);const h=d.dot(a);if(u*h>0||o.distanceTo(r)<u)return;const f=a.dot(l);if(Math.abs(f)<this.precision)return;const p=new c,y=new c,v=new c;o.vsub(s,p);const w=-a.dot(p)/f;l.scale(w,y),o.vadd(y,v),this.reportIntersection(a,v,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=bs;o.from.copy(this.from),o.to.copy(this.to),W.pointToLocalFrame(s,e,o.from,o.from),W.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=Es;let l,a,d,u;l=a=0,d=u=t.data.length-1;const h=new U;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),l=Math.max(l,r[0]),a=Math.max(a,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let f=l;f<d;f++)for(let p=a;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),W.pointToWorldFrame(s,e,t.pillarOffset,At),this._intersectConvex(t.pillarConvex,e,At,n,i,ce),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),W.pointToWorldFrame(s,e,t.pillarOffset,At),this._intersectConvex(t.pillarConvex,e,At,n,i,ce)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,l=t.radius,a=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-l**2,h=d**2-4*a*u,f=zs,p=Cs;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const y=(-d-Math.sqrt(h))/(2*a),v=(-d+Math.sqrt(h))/(2*a);if(y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=Ss,l=le,a=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),w=a?a.length:d.length,m=this.result;for(let b=0;!m.shouldStop&&b<w;b++){const E=a?a[b]:b,A=d[E],N=h[E],P=e,z=s;l.copy(u[A[0]]),P.vmult(l,l),l.vadd(z,l),l.vsub(p,l),P.vmult(N,r);const C=f.dot(r);if(Math.abs(C)<this.precision)continue;const B=r.dot(l)/C;if(!(B<0)){f.scale(B,X),X.vadd(p,X),$.copy(u[A[0]]),P.vmult($,$),z.vadd($,$);for(let R=1;!m.shouldStop&&R<A.length-1;R++){J.copy(u[A[R]]),Q.copy(u[A[R+1]]),P.vmult(J,J),P.vmult(Q,Q),z.vadd(J,J),z.vadd(Q,Q);const T=X.distanceTo(p);!(G.pointInTriangle(X,$,J,Q)||G.pointInTriangle(X,J,$,Q))||T>v||this.reportIntersection(r,X,i,n,E)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=As,l=Ps,a=Fs,d=le,u=Ms,h=Ns,f=Bs,p=Ts,y=Is,v=t.indices;t.vertices;const w=this.from,m=this.to,b=this.direction;a.position.copy(s),a.quaternion.copy(e),W.vectorToLocalFrame(s,e,b,u),W.pointToLocalFrame(s,e,w,h),W.pointToLocalFrame(s,e,m,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,u),u.normalize();const E=h.distanceSquared(f);t.tree.rayQuery(this,a,l);for(let A=0,N=l.length;!this.result.shouldStop&&A!==N;A++){const P=l[A];t.getNormal(P,r),t.getVertex(v[P*3],$),$.vsub(h,d);const z=u.dot(r),C=r.dot(d)/z;if(C<0)continue;u.scale(C,X),X.vadd(h,X),t.getVertex(v[P*3+1],J),t.getVertex(v[P*3+2],Q);const B=X.distanceSquared(h);!(G.pointInTriangle(X,J,$,Q)||G.pointInTriangle(X,$,J,Q))||B>E||(W.vectorToWorldFrame(e,r,y),W.pointToWorldFrame(s,e,X,p),this.reportIntersection(y,p,i,n,P))}l.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,l=o.distanceTo(e),a=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(a.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case G.ALL:this.hasHit=!0,a.set(o,r,t,e,s,n,l),a.hasHit=!0,this.callback(a);break;case G.CLOSEST:(l<a.distance||!a.hasHit)&&(this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,l));break;case G.ANY:this.hasHit=!0,a.hasHit=!0,a.set(o,r,t,e,s,n,l),a.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,lt),s.vsub(e,pt),t.vsub(e,Vt);const i=lt.dot(lt),o=lt.dot(pt),r=lt.dot(Vt),l=pt.dot(pt),a=pt.dot(Vt);let d,u;return(d=l*r-o*a)>=0&&(u=i*a-o*r)>=0&&d+u<i*l-o*o}}G.CLOSEST=Kt.CLOSEST;G.ANY=Kt.ANY;G.ALL=Kt.ALL;const re=new U,Wt=[],pt=new c,Vt=new c,xs=new c,gs=new j,X=new c,$=new c,J=new c,Q=new c;new c;new Tt;const ce={faceList:[0]},At=new c,bs=new G,Es=[],zs=new c,Cs=new c,Ss=new c;new c;new c;const le=new c,As=new c,Ms=new c,Ns=new c,Bs=new c,Is=new c,Ts=new c;new U;const Ps=[],Fs=new W,lt=new c,Mt=new c;function Rs(q,t,e){e.vsub(q,lt);const s=lt.dot(t);return t.scale(s,Mt),Mt.vadd(q,Mt),e.distanceTo(Mt)}class _s{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class ae{constructor(){this.spatial=new c,this.rotational=new c}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class gt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=gt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new ae,this.jacobianElementB=new ae,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,l=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,l)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,l=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,l)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,l=n.torque,a=s.invMassSolve,d=n.invMassSolve;return i.scale(a,he),r.scale(d,de),s.invInertiaWorldSolve.vmult(o,ue),n.invInertiaWorldSolve.vmult(l,pe),t.multiplyVectors(he,ue)+e.multiplyVectors(de,pe)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,l=n.invInertiaWorldSolve;let a=i+o;return r.vmult(t.rotational,Nt),a+=Nt.dot(t.rotational),l.vmult(e.rotational,Nt),a+=Nt.dot(e.rotational),a}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=qs;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}gt.idCounter=0;const he=new c,de=new c,ue=new c,pe=new c,Nt=new c,qs=new c;class Ls extends gt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new c,this.rj=new c,this.ni=new c}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,l=Os,a=ks,d=n.velocity,u=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=Ws,y=this.jacobianElementA,v=this.jacobianElementB,w=this.ni;o.cross(w,l),r.cross(w,a),w.negate(y.spatial),l.negate(y.rotational),v.spatial.copy(w),v.rotational.copy(a),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const m=w.dot(p),b=this.restitution+1,E=b*h.dot(w)-b*d.dot(w)+f.dot(a)-u.dot(l),A=this.computeGiMf();return-m*e-E*s-t*A}getImpactVelocityAlongNormal(){const t=Vs,e=js,s=Gs,n=Hs,i=Ds;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const Os=new c,ks=new c,Ws=new c,Vs=new c,js=new c,Gs=new c,Hs=new c,Ds=new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;class fe extends gt{constructor(t,e,s){super(t,e,-s,s),this.ri=new c,this.rj=new c,this.t=new c}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Ys,o=Xs,r=this.t;s.cross(r,i),n.cross(r,o);const l=this.jacobianElementA,a=this.jacobianElementB;r.negate(l.spatial),i.negate(l.rotational),a.spatial.copy(r),a.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const Ys=new c,Xs=new c;class bt{constructor(t,e,s){s=_s.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=bt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}bt.idCounter=0;class Et{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=Et.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}Et.idCounter=0;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new G;new c;new c;new c;new c(1,0,0),new c(0,1,0),new c(0,0,1);new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;class Us extends I{constructor(t){if(super({type:I.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new c);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const l=o[r];s[l]=t[l]-i,n[l]=t[l]+i}}}new c;new c;new c;new c;new c;new c;new c;new c;new c;class $s extends I{constructor(){super({type:I.types.PLANE}),this.worldNormal=new c,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new c),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){et.set(0,0,1),e.vmult(et,et);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),et.x===1?n.x=t.x:et.x===-1&&(s.x=t.x),et.y===1?n.y=t.y:et.y===-1&&(s.y=t.y),et.z===1?n.z=t.z:et.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const et=new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new U;new c;new U;new c;new c;new c;new c;new c;new c;new c;new U;new c;new W;new U;class Ks{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class Zs extends Ks{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,l=e.bodies,a=l.length,d=t;let u,h,f,p,y,v;if(r!==0)for(let E=0;E!==a;E++)l[E].updateSolveMassProperties();const w=Qs,m=tn,b=Js;w.length=r,m.length=r,b.length=r;for(let E=0;E!==r;E++){const A=o[E];b[E]=0,m[E]=A.computeB(d),w[E]=1/A.computeC()}if(r!==0){for(let N=0;N!==a;N++){const P=l[N],z=P.vlambda,C=P.wlambda;z.set(0,0,0),C.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let N=0;N!==r;N++){const P=o[N];u=m[N],h=w[N],v=b[N],y=P.computeGWlambda(),f=h*(u-y-P.eps*v),v+f<P.minForce?f=P.minForce-v:v+f>P.maxForce&&(f=P.maxForce-v),b[N]+=f,p+=f>0?f:-f,P.addToWlambda(f)}if(p*p<i)break}for(let N=0;N!==a;N++){const P=l[N],z=P.velocity,C=P.angularVelocity;P.vlambda.vmul(P.linearFactor,P.vlambda),z.vadd(P.vlambda,z),P.wlambda.vmul(P.angularFactor,P.wlambda),C.vadd(P.wlambda,C)}let E=o.length;const A=1/d;for(;E--;)o[E].multiplier=b[E]*A}return s}}const Js=[],Qs=[],tn=[];F.STATIC;class en{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class sn extends en{constructor(){super(...arguments),this.type=c}constructObject(){return new c}}const V={sphereSphere:I.types.SPHERE,spherePlane:I.types.SPHERE|I.types.PLANE,boxBox:I.types.BOX|I.types.BOX,sphereBox:I.types.SPHERE|I.types.BOX,planeBox:I.types.PLANE|I.types.BOX,convexConvex:I.types.CONVEXPOLYHEDRON,sphereConvex:I.types.SPHERE|I.types.CONVEXPOLYHEDRON,planeConvex:I.types.PLANE|I.types.CONVEXPOLYHEDRON,boxConvex:I.types.BOX|I.types.CONVEXPOLYHEDRON,sphereHeightfield:I.types.SPHERE|I.types.HEIGHTFIELD,boxHeightfield:I.types.BOX|I.types.HEIGHTFIELD,convexHeightfield:I.types.CONVEXPOLYHEDRON|I.types.HEIGHTFIELD,sphereParticle:I.types.PARTICLE|I.types.SPHERE,planeParticle:I.types.PLANE|I.types.PARTICLE,boxParticle:I.types.BOX|I.types.PARTICLE,convexParticle:I.types.PARTICLE|I.types.CONVEXPOLYHEDRON,cylinderCylinder:I.types.CYLINDER,sphereCylinder:I.types.SPHERE|I.types.CYLINDER,planeCylinder:I.types.PLANE|I.types.CYLINDER,boxCylinder:I.types.BOX|I.types.CYLINDER,convexCylinder:I.types.CONVEXPOLYHEDRON|I.types.CYLINDER,heightfieldCylinder:I.types.HEIGHTFIELD|I.types.CYLINDER,particleCylinder:I.types.PARTICLE|I.types.CYLINDER,sphereTrimesh:I.types.SPHERE|I.types.TRIMESH,planeTrimesh:I.types.PLANE|I.types.TRIMESH};class nn{get[V.sphereSphere](){return this.sphereSphere}get[V.spherePlane](){return this.spherePlane}get[V.boxBox](){return this.boxBox}get[V.sphereBox](){return this.sphereBox}get[V.planeBox](){return this.planeBox}get[V.convexConvex](){return this.convexConvex}get[V.sphereConvex](){return this.sphereConvex}get[V.planeConvex](){return this.planeConvex}get[V.boxConvex](){return this.boxConvex}get[V.sphereHeightfield](){return this.sphereHeightfield}get[V.boxHeightfield](){return this.boxHeightfield}get[V.convexHeightfield](){return this.convexHeightfield}get[V.sphereParticle](){return this.sphereParticle}get[V.planeParticle](){return this.planeParticle}get[V.boxParticle](){return this.boxParticle}get[V.convexParticle](){return this.convexParticle}get[V.cylinderCylinder](){return this.convexConvex}get[V.sphereCylinder](){return this.sphereConvex}get[V.planeCylinder](){return this.planeConvex}get[V.boxCylinder](){return this.boxConvex}get[V.convexCylinder](){return this.convexConvex}get[V.heightfieldCylinder](){return this.heightfieldCylinder}get[V.particleCylinder](){return this.particleCylinder}get[V.sphereTrimesh](){return this.sphereTrimesh}get[V.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new sn,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Ls(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const l=this.currentContactMaterial;r.restitution=l.restitution,r.setSpookParams(l.contactEquationStiffness,l.contactEquationRelaxation,this.world.dt);const a=s.material||t.material,d=n.material||e.material;return a&&d&&a.restitution>=0&&d.restitution>=0&&(r.restitution=a.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,l=this.currentContactMaterial;let a=l.friction;const d=i.material||s.material,u=o.material||n.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(a=d.friction*u.friction),a>0){const h=a*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,y=p.length?p.pop():new fe(s,n,h*f),v=p.length?p.pop():new fe(s,n,h*f);return y.bi=v.bi=s,y.bj=v.bj=n,y.minForce=v.minForce=-h*f,y.maxForce=v.maxForce=h*f,y.ri.copy(t.ri),y.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(y.t,v.t),y.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),v.setSpookParams(l.frictionEquationStiffness,l.frictionEquationRelaxation,r.dt),y.enabled=v.enabled=t.enabled,e.push(y,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];ct.setZero(),dt.setZero(),ut.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(ct.vadd(e.ni,ct),dt.vadd(e.ri,dt),ut.vadd(e.rj,ut)):(ct.vsub(e.ni,ct),dt.vadd(e.rj,dt),ut.vadd(e.ri,ut));const o=1/t;dt.scale(o,s.ri),ut.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),ct.normalize(),ct.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const l=cn,a=ln,d=on,u=rn;for(let h=0,f=t.length;h!==f;h++){const p=t[h],y=e[h];let v=null;p.material&&y.material&&(v=s.getContactMaterial(p.material,y.material)||null);const w=p.type&F.KINEMATIC&&y.type&F.STATIC||p.type&F.STATIC&&y.type&F.KINEMATIC||p.type&F.KINEMATIC&&y.type&F.KINEMATIC;for(let m=0;m<p.shapes.length;m++){p.quaternion.mult(p.shapeOrientations[m],l),p.quaternion.vmult(p.shapeOffsets[m],d),d.vadd(p.position,d);const b=p.shapes[m];for(let E=0;E<y.shapes.length;E++){y.quaternion.mult(y.shapeOrientations[E],a),y.quaternion.vmult(y.shapeOffsets[E],u),u.vadd(y.position,u);const A=y.shapes[E];if(!(b.collisionFilterMask&A.collisionFilterGroup&&A.collisionFilterMask&b.collisionFilterGroup)||d.distanceTo(u)>b.boundingSphereRadius+A.boundingSphereRadius)continue;let N=null;b.material&&A.material&&(N=s.getContactMaterial(b.material,A.material)||null),this.currentContactMaterial=N||v||s.defaultContactMaterial;const P=b.type|A.type,z=this[P];if(z){let C=!1;b.type<A.type?C=z.call(this,b,A,d,u,l,a,p,y,b,A,w):C=z.call(this,A,b,u,d,a,l,y,p,b,A,w),C&&w&&(s.shapeOverlapKeeper.set(b.id,A.id),s.bodyOverlapKeeper.set(p.id,y.id))}}}}}sphereSphere(t,e,s,n,i,o,r,l,a,d,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,l,t,e,a,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(l.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,l,a,d,u){const h=this.createContactEquation(r,l,t,e,a,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,Bt),h.ni.scale(h.ni.dot(Bt),me),Bt.vsub(me,h.rj),-Bt.dot(h.ni)<=t.radius){if(u)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(l.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,l,t,e,u)}sphereBox(t,e,s,n,i,o,r,l,a,d,u){const h=this.v3pool,f=Rn;s.vsub(n,It),e.getSideNormals(f,o);const p=t.radius;let y=!1;const v=qn,w=Ln,m=On;let b=null,E=0,A=0,N=0,P=null;for(let g=0,L=f.length;g!==L&&y===!1;g++){const O=Tn;O.copy(f[g]);const k=O.length();O.normalize();const Y=It.dot(O);if(Y<k+p&&Y>0){const D=Pn,_=Fn;D.copy(f[(g+1)%3]),_.copy(f[(g+2)%3]);const ht=D.length(),St=_.length();D.normalize(),_.normalize();const Rt=It.dot(D),_t=It.dot(_);if(Rt<ht&&Rt>-ht&&_t<St&&_t>-St){const Qt=Math.abs(Y-k-p);if((P===null||Qt<P)&&(P=Qt,A=Rt,N=_t,b=k,v.copy(O),w.copy(D),m.copy(_),E++,u))return!0}}}if(E){y=!0;const g=this.createContactEquation(r,l,t,e,a,d);v.scale(-p,g.ri),g.ni.copy(v),g.ni.negate(g.ni),v.scale(b,v),w.scale(A,w),v.vadd(w,v),m.scale(N,m),v.vadd(m,g.rj),g.ri.vadd(s,g.ri),g.ri.vsub(r.position,g.ri),g.rj.vadd(n,g.rj),g.rj.vsub(l.position,g.rj),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult)}let z=h.get();const C=_n;for(let g=0;g!==2&&!y;g++)for(let L=0;L!==2&&!y;L++)for(let O=0;O!==2&&!y;O++)if(z.set(0,0,0),g?z.vadd(f[0],z):z.vsub(f[0],z),L?z.vadd(f[1],z):z.vsub(f[1],z),O?z.vadd(f[2],z):z.vsub(f[2],z),n.vadd(z,C),C.vsub(s,C),C.lengthSquared()<p*p){if(u)return!0;y=!0;const k=this.createContactEquation(r,l,t,e,a,d);k.ri.copy(C),k.ri.normalize(),k.ni.copy(k.ri),k.ri.scale(p,k.ri),k.rj.copy(z),k.ri.vadd(s,k.ri),k.ri.vsub(r.position,k.ri),k.rj.vadd(n,k.rj),k.rj.vsub(l.position,k.rj),this.result.push(k),this.createFrictionEquationsFromContact(k,this.frictionResult)}h.release(z),z=null;const B=h.get(),R=h.get(),T=h.get(),x=h.get(),M=h.get(),S=f.length;for(let g=0;g!==S&&!y;g++)for(let L=0;L!==S&&!y;L++)if(g%3!==L%3){f[L].cross(f[g],B),B.normalize(),f[g].vadd(f[L],R),T.copy(s),T.vsub(R,T),T.vsub(n,T);const O=T.dot(B);B.scale(O,x);let k=0;for(;k===g%3||k===L%3;)k++;M.copy(s),M.vsub(x,M),M.vsub(R,M),M.vsub(n,M);const Y=Math.abs(O),D=M.length();if(Y<f[k].length()&&D<p){if(u)return!0;y=!0;const _=this.createContactEquation(r,l,t,e,a,d);R.vadd(x,_.rj),_.rj.copy(_.rj),M.negate(_.ni),_.ni.normalize(),_.ri.copy(_.rj),_.ri.vadd(n,_.ri),_.ri.vsub(s,_.ri),_.ri.normalize(),_.ri.scale(p,_.ri),_.ri.vadd(s,_.ri),_.ri.vsub(r.position,_.ri),_.rj.vadd(n,_.rj),_.rj.vsub(l.position,_.rj),this.result.push(_),this.createFrictionEquationsFromContact(_,this.frictionResult)}}h.release(B,R,T,x,M)}planeBox(t,e,s,n,i,o,r,l,a,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,l,t,e,u)}convexConvex(t,e,s,n,i,o,r,l,a,d,u,h,f){const p=Qn;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,h,f)){const y=[],v=ti;t.clipAgainstHull(s,i,e,n,o,p,-100,100,y);let w=0;for(let m=0;m!==y.length;m++){if(u)return!0;const b=this.createContactEquation(r,l,t,e,a,d),E=b.ri,A=b.rj;p.negate(b.ni),y[m].normal.negate(v),v.scale(y[m].depth,v),y[m].point.vadd(v,E),A.copy(y[m].point),E.vsub(s,E),A.vsub(n,A),E.vadd(s,E),E.vsub(r.position,E),A.vadd(n,A),A.vsub(l.position,A),this.result.push(b),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(b,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,l,a,d,u){const h=this.v3pool;s.vsub(n,kn);const f=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let w=!1;for(let m=0;m!==y.length;m++){const b=y[m],E=Gn;o.vmult(b,E),n.vadd(E,E);const A=jn;if(E.vsub(s,A),A.lengthSquared()<v*v){if(u)return!0;w=!0;const N=this.createContactEquation(r,l,t,e,a,d);N.ri.copy(A),N.ri.normalize(),N.ni.copy(N.ri),N.ri.scale(v,N.ri),E.vsub(n,N.rj),N.ri.vadd(s,N.ri),N.ri.vsub(r.position,N.ri),N.rj.vadd(n,N.rj),N.rj.vsub(l.position,N.rj),this.result.push(N),this.createFrictionEquationsFromContact(N,this.frictionResult);return}}for(let m=0,b=p.length;m!==b&&w===!1;m++){const E=f[m],A=p[m],N=Hn;o.vmult(E,N);const P=Dn;o.vmult(y[A[0]],P),P.vadd(n,P);const z=Yn;N.scale(-v,z),s.vadd(z,z);const C=Xn;z.vsub(P,C);const B=C.dot(N),R=Un;if(s.vsub(P,R),B<0&&R.dot(N)>0){const T=[];for(let x=0,M=A.length;x!==M;x++){const S=h.get();o.vmult(y[A[x]],S),n.vadd(S,S),T.push(S)}if(In(T,N,s)){if(u)return!0;w=!0;const x=this.createContactEquation(r,l,t,e,a,d);N.scale(-v,x.ri),N.negate(x.ni);const M=h.get();N.scale(-B,M);const S=h.get();N.scale(-v,S),s.vsub(n,x.rj),x.rj.vadd(S,x.rj),x.rj.vadd(M,x.rj),x.rj.vadd(n,x.rj),x.rj.vsub(l.position,x.rj),x.ri.vadd(s,x.ri),x.ri.vsub(r.position,x.ri),h.release(M),h.release(S),this.result.push(x),this.createFrictionEquationsFromContact(x,this.frictionResult);for(let g=0,L=T.length;g!==L;g++)h.release(T[g]);return}else for(let x=0;x!==A.length;x++){const M=h.get(),S=h.get();o.vmult(y[A[(x+1)%A.length]],M),o.vmult(y[A[(x+2)%A.length]],S),n.vadd(M,M),n.vadd(S,S);const g=Wn;S.vsub(M,g);const L=Vn;g.unit(L);const O=h.get(),k=h.get();s.vsub(M,k);const Y=k.dot(L);L.scale(Y,O),O.vadd(M,O);const D=h.get();if(O.vsub(s,D),Y>0&&Y*Y<g.lengthSquared()&&D.lengthSquared()<v*v){if(u)return!0;const _=this.createContactEquation(r,l,t,e,a,d);O.vsub(n,_.rj),O.vsub(s,_.ni),_.ni.normalize(),_.ni.scale(v,_.ri),_.rj.vadd(n,_.rj),_.rj.vsub(l.position,_.rj),_.ri.vadd(s,_.ri),_.ri.vsub(r.position,_.ri),this.result.push(_),this.createFrictionEquationsFromContact(_,this.frictionResult);for(let ht=0,St=T.length;ht!==St;ht++)h.release(T[ht]);h.release(M),h.release(S),h.release(O),h.release(D),h.release(k);return}h.release(M),h.release(S),h.release(O),h.release(D),h.release(k)}for(let x=0,M=T.length;x!==M;x++)h.release(T[x])}}}planeConvex(t,e,s,n,i,o,r,l,a,d,u){const h=$n,f=Kn;f.set(0,0,1),i.vmult(f,f);let p=0;const y=Zn;for(let v=0;v!==e.vertices.length;v++)if(h.copy(e.vertices[v]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,y),f.dot(y)<=0){if(u)return!0;const m=this.createContactEquation(r,l,t,e,a,d),b=Jn;f.scale(f.dot(y),b),h.vsub(b,b),b.vsub(s,m.ri),m.ni.copy(f),h.vsub(n,m.rj),m.ri.vadd(s,m.ri),m.ri.vsub(r.position,m.ri),m.rj.vadd(n,m.rj),m.rj.vsub(l.position,m.rj),this.result.push(m),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(m,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,l,a,d,u){const h=e.data,f=t.radius,p=e.elementSize,y=ui,v=di;W.pointToLocalFrame(n,o,s,v);let w=Math.floor((v.x-f)/p)-1,m=Math.ceil((v.x+f)/p)+1,b=Math.floor((v.y-f)/p)-1,E=Math.ceil((v.y+f)/p)+1;if(m<0||E<0||w>h.length||b>h[0].length)return;w<0&&(w=0),m<0&&(m=0),b<0&&(b=0),E<0&&(E=0),w>=h.length&&(w=h.length-1),m>=h.length&&(m=h.length-1),E>=h[0].length&&(E=h[0].length-1),b>=h[0].length&&(b=h[0].length-1);const A=[];e.getRectMinMax(w,b,m,E,A);const N=A[0],P=A[1];if(v.z-f>P||v.z+f<N)return;const z=this.result;for(let C=w;C<m;C++)for(let B=b;B<E;B++){const R=z.length;let T=!1;if(e.getConvexTrianglePillar(C,B,!1),W.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(T=this.sphereConvex(t,e.pillarConvex,s,y,i,o,r,l,t,e,u)),u&&T||(e.getConvexTrianglePillar(C,B,!0),W.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(T=this.sphereConvex(t,e.pillarConvex,s,y,i,o,r,l,t,e,u)),u&&T))return!0;if(z.length-R>2)return}}boxHeightfield(t,e,s,n,i,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,l,a,d,u){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,y=ai,v=hi,w=li;W.pointToLocalFrame(n,o,s,w);let m=Math.floor((w.x-p)/f)-1,b=Math.ceil((w.x+p)/f)+1,E=Math.floor((w.y-p)/f)-1,A=Math.ceil((w.y+p)/f)+1;if(b<0||A<0||m>h.length||E>h[0].length)return;m<0&&(m=0),b<0&&(b=0),E<0&&(E=0),A<0&&(A=0),m>=h.length&&(m=h.length-1),b>=h.length&&(b=h.length-1),A>=h[0].length&&(A=h[0].length-1),E>=h[0].length&&(E=h[0].length-1);const N=[];e.getRectMinMax(m,E,b,A,N);const P=N[0],z=N[1];if(!(w.z-p>z||w.z+p<P))for(let C=m;C<b;C++)for(let B=E;B<A;B++){let R=!1;if(e.getConvexTrianglePillar(C,B,!1),W.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,y,i,o,r,l,null,null,u,v,null)),u&&R||(e.getConvexTrianglePillar(C,B,!0),W.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(R=this.convexConvex(t,e.pillarConvex,s,y,i,o,r,l,null,null,u,v,null)),u&&R))return!0}}sphereParticle(t,e,s,n,i,o,r,l,a,d,u){const h=ii;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(l,r,e,t,a,d);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,l,a,d,u){const h=ei;h.set(0,0,1),r.quaternion.vmult(h,h);const f=si;if(n.vsub(r.position,f),h.dot(f)<=0){if(u)return!0;const y=this.createContactEquation(l,r,e,t,a,d);y.ni.copy(h),y.ni.negate(y.ni),y.ri.set(0,0,0);const v=ni;h.scale(h.dot(n),v),n.vsub(v,v),y.rj.copy(v),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,l,a,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,l,t,e,u)}convexParticle(t,e,s,n,i,o,r,l,a,d,u){let h=-1;const f=ri,p=ci;let y=null;const v=oi;if(v.copy(n),v.vsub(s,v),i.conjugate(ve),ve.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,m=t.faces.length;w!==m;w++){const b=[t.worldVertices[t.faces[w][0]]],E=t.worldFaceNormals[w];n.vsub(b[0],ye);const A=-E.dot(ye);if(y===null||Math.abs(A)<Math.abs(y)){if(u)return!0;y=A,h=w,f.copy(E)}}if(h!==-1){const w=this.createContactEquation(l,r,e,t,a,d);f.scale(y,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const m=w.ri,b=w.rj;m.vadd(n,m),m.vsub(l.position,m),b.vadd(s,b),b.vsub(r.position,b),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,l,a,d,u){return this.convexHeightfield(e,t,n,s,o,i,l,r,a,d,u)}particleCylinder(t,e,s,n,i,o,r,l,a,d,u){return this.convexParticle(e,t,n,s,o,i,l,r,a,d,u)}sphereTrimesh(t,e,s,n,i,o,r,l,a,d,u){const h=vn,f=yn,p=wn,y=xn,v=gn,w=bn,m=Sn,b=mn,E=pn,A=An;W.pointToLocalFrame(n,o,s,v);const N=t.radius;m.lowerBound.set(v.x-N,v.y-N,v.z-N),m.upperBound.set(v.x+N,v.y+N,v.z+N),e.getTrianglesInAABB(m,A);const P=fn,z=t.radius*t.radius;for(let x=0;x<A.length;x++)for(let M=0;M<3;M++)if(e.getVertex(e.indices[A[x]*3+M],P),P.vsub(v,E),E.lengthSquared()<=z){if(b.copy(P),W.pointToWorldFrame(n,o,b,P),P.vsub(s,E),u)return!0;let S=this.createContactEquation(r,l,t,e,a,d);S.ni.copy(E),S.ni.normalize(),S.ri.copy(S.ni),S.ri.scale(t.radius,S.ri),S.ri.vadd(s,S.ri),S.ri.vsub(r.position,S.ri),S.rj.copy(P),S.rj.vsub(l.position,S.rj),this.result.push(S),this.createFrictionEquationsFromContact(S,this.frictionResult)}for(let x=0;x<A.length;x++)for(let M=0;M<3;M++){e.getVertex(e.indices[A[x]*3+M],h),e.getVertex(e.indices[A[x]*3+(M+1)%3],f),f.vsub(h,p),v.vsub(f,w);const S=w.dot(p);v.vsub(h,w);let g=w.dot(p);if(g>0&&S<0&&(v.vsub(h,w),y.copy(p),y.normalize(),g=w.dot(y),y.scale(g,w),w.vadd(h,w),w.distanceTo(v)<t.radius)){if(u)return!0;const O=this.createContactEquation(r,l,t,e,a,d);w.vsub(v,O.ni),O.ni.normalize(),O.ni.scale(t.radius,O.ri),O.ri.vadd(s,O.ri),O.ri.vsub(r.position,O.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(l.position,O.rj),W.vectorToWorldFrame(o,O.ni,O.ni),W.vectorToWorldFrame(o,O.ri,O.ri),this.result.push(O),this.createFrictionEquationsFromContact(O,this.frictionResult)}}const C=En,B=zn,R=Cn,T=un;for(let x=0,M=A.length;x!==M;x++){e.getTriangleVertices(A[x],C,B,R),e.getNormal(A[x],T),v.vsub(C,w);let S=w.dot(T);if(T.scale(S,w),v.vsub(w,w),S=w.distanceTo(v),G.pointInTriangle(w,C,B,R)&&S<t.radius){if(u)return!0;let g=this.createContactEquation(r,l,t,e,a,d);w.vsub(v,g.ni),g.ni.normalize(),g.ni.scale(t.radius,g.ri),g.ri.vadd(s,g.ri),g.ri.vsub(r.position,g.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(l.position,g.rj),W.vectorToWorldFrame(o,g.ni,g.ni),W.vectorToWorldFrame(o,g.ri,g.ri),this.result.push(g),this.createFrictionEquationsFromContact(g,this.frictionResult)}}A.length=0}planeTrimesh(t,e,s,n,i,o,r,l,a,d,u){const h=new c,f=an;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const y=new c;y.copy(h),W.pointToWorldFrame(n,o,y,h);const v=hn;if(h.vsub(s,v),f.dot(v)<=0){if(u)return!0;const m=this.createContactEquation(r,l,t,e,a,d);m.ni.copy(f);const b=dn;f.scale(v.dot(f),b),h.vsub(b,b),m.ri.copy(b),m.ri.vsub(r.position,m.ri),m.rj.copy(h),m.rj.vsub(l.position,m.rj),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}}}const ct=new c,dt=new c,ut=new c,on=new c,rn=new c,cn=new j,ln=new j,an=new c,hn=new c,dn=new c,un=new c,pn=new c;new c;const fn=new c,mn=new c,vn=new c,yn=new c,wn=new c,xn=new c,gn=new c,bn=new c,En=new c,zn=new c,Cn=new c,Sn=new U,An=[],Bt=new c,me=new c,Mn=new c,Nn=new c,Bn=new c;function In(q,t,e){let s=null;const n=q.length;for(let i=0;i!==n;i++){const o=q[i],r=Mn;q[(i+1)%n].vsub(o,r);const l=Nn;r.cross(t,l);const a=Bn;e.vsub(o,a);const d=l.dot(a);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const It=new c,Tn=new c,Pn=new c,Fn=new c,Rn=[new c,new c,new c,new c,new c,new c],_n=new c,qn=new c,Ln=new c,On=new c,kn=new c,Wn=new c,Vn=new c,jn=new c,Gn=new c,Hn=new c,Dn=new c,Yn=new c,Xn=new c,Un=new c;new c;new c;const $n=new c,Kn=new c,Zn=new c,Jn=new c,Qn=new c,ti=new c,ei=new c,si=new c,ni=new c,ii=new c,ve=new j,oi=new c;new c;const ri=new c,ye=new c,ci=new c,li=new c,ai=new c,hi=[0],di=new c,ui=new c;class we{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let l=0;l<i;l++){let a=!1;const d=s[l];for(;d>n[r];)r++;a=d===n[r],a||xe(t,d)}r=0;for(let l=0;l<o;l++){let a=!1;const d=n[l];for(;d>s[r];)r++;a=s[r]===d,a||xe(e,d)}}}function xe(q,t){q.push((t&4294901760)>>16,t&65535)}const jt=(q,t)=>q<t?`${q}-${t}`:`${t}-${q}`;class pi{constructor(){this.data={keys:[]}}get(t,e){const s=jt(t,e);return this.data[s]}set(t,e,s){const n=jt(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=jt(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class fi extends ge{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new c,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new c,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new ws,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new Zs,this.constraints=[],this.narrowphase=new nn(this),this.collisionMatrix=new ie,this.collisionMatrixPrevious=new ie,this.bodyOverlapKeeper=new we,this.shapeOverlapKeeper=new we,this.contactmaterials=[],this.contactMaterialTable=new pi,this.defaultMaterial=new Et("default"),this.defaultContactMaterial=new bt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof Tt?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=G.ALL,s.from=t,s.to=e,s.callback=n,Gt.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=G.ANY,s.from=t,s.to=e,s.result=n,Gt.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=G.CLOSEST,s.from=t,s.to=e,s.result=n,Gt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof F&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=H.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=H.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(H.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const l=this.bodies[r];l.previousPosition.lerp(l.position,o,l.interpolatedPosition),l.previousQuaternion.slerp(l.quaternion,o,l.interpolatedQuaternion),l.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=xi,n=gi,i=this.bodies.length,o=this.bodies,r=this.solver,l=this.gravity,a=this.doProfiling,d=this.profile,u=F.DYNAMIC;let h=-1/0;const f=this.constraints,p=wi;l.length();const y=l.x,v=l.y,w=l.z;let m=0;for(a&&(h=H.now()),m=0;m!==i;m++){const x=o[m];if(x.type===u){const M=x.force,S=x.mass;M.x+=S*y,M.y+=S*v,M.z+=S*w}}for(let x=0,M=this.subsystems.length;x!==M;x++)this.subsystems[x].update();a&&(h=H.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),a&&(d.broadphase=H.now()-h);let b=f.length;for(m=0;m!==b;m++){const x=f[m];if(!x.collideConnected)for(let M=s.length-1;M>=0;M-=1)(x.bodyA===s[M]&&x.bodyB===n[M]||x.bodyB===s[M]&&x.bodyA===n[M])&&(s.splice(M,1),n.splice(M,1))}this.collisionMatrixTick(),a&&(h=H.now());const E=yi,A=e.length;for(m=0;m!==A;m++)E.push(e[m]);e.length=0;const N=this.frictionEquations.length;for(m=0;m!==N;m++)p.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,E,this.frictionEquations,p),a&&(d.narrowphase=H.now()-h),a&&(h=H.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const P=e.length;for(let x=0;x!==P;x++){const M=e[x],S=M.bi,g=M.bj,L=M.si,O=M.sj;let k;if(S.material&&g.material?k=this.getContactMaterial(S.material,g.material)||this.defaultContactMaterial:k=this.defaultContactMaterial,k.friction,S.material&&g.material&&(S.material.friction>=0&&g.material.friction>=0&&S.material.friction*g.material.friction,S.material.restitution>=0&&g.material.restitution>=0&&(M.restitution=S.material.restitution*g.material.restitution)),r.addEquation(M),S.allowSleep&&S.type===F.DYNAMIC&&S.sleepState===F.SLEEPING&&g.sleepState===F.AWAKE&&g.type!==F.STATIC){const Y=g.velocity.lengthSquared()+g.angularVelocity.lengthSquared(),D=g.sleepSpeedLimit**2;Y>=D*2&&(S.wakeUpAfterNarrowphase=!0)}if(g.allowSleep&&g.type===F.DYNAMIC&&g.sleepState===F.SLEEPING&&S.sleepState===F.AWAKE&&S.type!==F.STATIC){const Y=S.velocity.lengthSquared()+S.angularVelocity.lengthSquared(),D=S.sleepSpeedLimit**2;Y>=D*2&&(g.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(S,g,!0),this.collisionMatrixPrevious.get(S,g)||(ft.body=g,ft.contact=M,S.dispatchEvent(ft),ft.body=S,g.dispatchEvent(ft)),this.bodyOverlapKeeper.set(S.id,g.id),this.shapeOverlapKeeper.set(L.id,O.id)}for(this.emitContactEvents(),a&&(d.makeContactConstraints=H.now()-h,h=H.now()),m=0;m!==i;m++){const x=o[m];x.wakeUpAfterNarrowphase&&(x.wakeUp(),x.wakeUpAfterNarrowphase=!1)}for(b=f.length,m=0;m!==b;m++){const x=f[m];x.update();for(let M=0,S=x.equations.length;M!==S;M++){const g=x.equations[M];r.addEquation(g)}}r.solve(t,this),a&&(d.solve=H.now()-h),r.removeAllEquations();const z=Math.pow;for(m=0;m!==i;m++){const x=o[m];if(x.type&u){const M=z(1-x.linearDamping,t),S=x.velocity;S.scale(M,S);const g=x.angularVelocity;if(g){const L=z(1-x.angularDamping,t);g.scale(L,g)}}}this.dispatchEvent(vi),a&&(h=H.now());const B=this.stepnumber%(this.quatNormalizeSkip+1)===0,R=this.quatNormalizeFast;for(m=0;m!==i;m++)o[m].integrate(t,B,R);this.clearForces(),this.broadphase.dirty=!0,a&&(d.integrate=H.now()-h),this.stepnumber+=1,this.dispatchEvent(mi);let T=!0;if(this.allowSleep)for(T=!1,m=0;m!==i;m++){const x=o[m];x.sleepTick(this.time),x.sleepState!==F.SLEEPING&&(T=!0)}this.hasActiveBodies=T}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(st,nt),t){for(let i=0,o=st.length;i<o;i+=2)mt.bodyA=this.getBodyById(st[i]),mt.bodyB=this.getBodyById(st[i+1]),this.dispatchEvent(mt);mt.bodyA=mt.bodyB=null}if(e){for(let i=0,o=nt.length;i<o;i+=2)vt.bodyA=this.getBodyById(nt[i]),vt.bodyB=this.getBodyById(nt[i+1]),this.dispatchEvent(vt);vt.bodyA=vt.bodyB=null}st.length=nt.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(st,nt),s){for(let i=0,o=st.length;i<o;i+=2){const r=this.getShapeById(st[i]),l=this.getShapeById(st[i+1]);it.shapeA=r,it.shapeB=l,r&&(it.bodyA=r.body),l&&(it.bodyB=l.body),this.dispatchEvent(it)}it.bodyA=it.bodyB=it.shapeA=it.shapeB=null}if(n){for(let i=0,o=nt.length;i<o;i+=2){const r=this.getShapeById(nt[i]),l=this.getShapeById(nt[i+1]);ot.shapeA=r,ot.shapeB=l,r&&(ot.bodyA=r.body),l&&(ot.bodyB=l.body),this.dispatchEvent(ot)}ot.bodyA=ot.bodyB=ot.shapeA=ot.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new U;const Gt=new G,H=globalThis.performance||{};if(!H.now){let q=Date.now();H.timing&&H.timing.navigationStart&&(q=H.timing.navigationStart),H.now=()=>Date.now()-q}new c;const mi={type:"postStep"},vi={type:"preStep"},ft={type:F.COLLIDE_EVENT_NAME,body:null,contact:null},yi=[],wi=[],xi=[],gi=[],st=[],nt=[],mt={type:"beginContact",bodyA:null,bodyB:null},vt={type:"endContact",bodyA:null,bodyB:null},it={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},ot={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};function bi(q,t,e){let{color:s=65280,scale:n=1,onInit:i,onUpdate:o}=e===void 0?{}:e;const r=[],l=new Re({color:s??65280,wireframe:!0}),a=new c,d=new c,u=new c,h=new j,f=new Ht(1),p=new te(1,1,1),y=new Dt(10,10,10,10);y.translate(0,0,1e-4);function v(z){const C=new qt,B=[];for(let T=0;T<z.vertices.length;T++){const x=z.vertices[T];B.push(x.x,x.y,x.z)}C.setAttribute("position",new Lt(B,3));const R=[];for(let T=0;T<z.faces.length;T++){const x=z.faces[T],M=x[0];for(let S=1;S<x.length-1;S++){const g=x[S],L=x[S+1];R.push(M,g,L)}}return C.setIndex(R),C.computeBoundingSphere(),C.computeVertexNormals(),C}function w(z){const C=new qt,B=[],R=a,T=d,x=u;for(let M=0;M<z.indices.length/3;M++)z.getTriangleVertices(M,R,T,x),B.push(R.x,R.y,R.z),B.push(T.x,T.y,T.z),B.push(x.x,x.y,x.z);return C.setAttribute("position",new Lt(B,3)),C.computeBoundingSphere(),C.computeVertexNormals(),C}function m(z){const C=new qt,B=z.elementSize||1,R=z.data.flatMap((x,M)=>x.flatMap((S,g)=>[M*B,g*B,S])),T=[];for(let x=0;x<z.data.length-1;x++)for(let M=0;M<z.data[x].length-1;M++){const S=z.data[x].length,g=x*S+M;T.push(g+1,g+S,g+S+1),T.push(g+S,g+1,g)}return C.setIndex(T),C.setAttribute("position",new Lt(R,3)),C.computeBoundingSphere(),C.computeVertexNormals(),C}function b(z){let C=new tt;const{SPHERE:B,BOX:R,PLANE:T,CYLINDER:x,CONVEXPOLYHEDRON:M,TRIMESH:S,HEIGHTFIELD:g}=I.types;switch(z.type){case B:{C=new tt(f,l);break}case R:{C=new tt(p,l);break}case T:{C=new tt(y,l);break}case x:{const L=new _e(z.radiusTop,z.radiusBottom,z.height,z.numSegments);C=new tt(L,l),z.geometryId=L.id;break}case M:{const L=v(z);C=new tt(L,l),z.geometryId=L.id;break}case S:{const L=w(z);C=new tt(L,l),z.geometryId=L.id;break}case g:{const L=m(z);C=new tt(L,l),z.geometryId=L.id;break}}return q.add(C),C}function E(z,C){const{SPHERE:B,BOX:R,PLANE:T,CYLINDER:x,CONVEXPOLYHEDRON:M,TRIMESH:S,HEIGHTFIELD:g}=I.types;switch(C.type){case B:{const{radius:L}=C;z.scale.set(L*n,L*n,L*n);break}case R:{z.scale.copy(C.halfExtents),z.scale.multiplyScalar(2*n);break}case T:break;case x:{z.scale.set(1*n,1*n,1*n);break}case M:{z.scale.set(1*n,1*n,1*n);break}case S:{z.scale.copy(C.scale).multiplyScalar(n);break}case g:{z.scale.set(1*n,1*n,1*n);break}}}function A(z,C){if(!z)return!1;const{geometry:B}=z;return B instanceof Ht&&C.type===I.types.SPHERE||B instanceof te&&C.type===I.types.BOX||B instanceof Dt&&C.type===I.types.PLANE||B.id===C.geometryId&&C.type===I.types.CYLINDER||B.id===C.geometryId&&C.type===I.types.CONVEXPOLYHEDRON||B.id===C.geometryId&&C.type===I.types.TRIMESH||B.id===C.geometryId&&C.type===I.types.HEIGHTFIELD}function N(z,C){let B=r[z],R=!1;return A(B,C)||(B&&q.remove(B),r[z]=B=b(C),R=!0),E(B,C),R}function P(){const z=r,C=a,B=h;let R=0;for(const T of t.bodies)for(let x=0;x!==T.shapes.length;x++){const M=T.shapes[x],S=N(R,M),g=z[R];g&&(T.quaternion.vmult(T.shapeOffsets[x],C),T.position.vadd(C,C),T.quaternion.mult(T.shapeOrientations[x],B),g.position.copy(C),g.quaternion.copy(B),S&&i instanceof Function&&i(T,g,M),!S&&o instanceof Function&&o(T,g,M)),R++}for(let T=R;T<z.length;T++){const x=z[T];x&&q.remove(x)}z.length=R}return{update:P}}const zt=new qe,wt=new Le(75,window.innerWidth/window.innerHeight,.1,1e3);wt.position.set(10,10,10);const Ne=new Ge.GUI,Be={drop:()=>{Ft.position=new c(0,10,0)},CannonDebugger:!1};Ne.add(Be,"drop");const Zt=new Oe;Zt.castShadow=!0;Zt.position.set(5,5,6);const Ei=new ke(new We("#ffffff"),.3);zt.add(Ei,Zt);const at=new Ve({preserveDrawingBuffer:!0});at.setSize(window.innerWidth,window.innerHeight);document.body.appendChild(at.domElement);at.shadowMap.enabled=!0;const Ie=new He(wt,at.domElement);Ie.enableDamping=!0;const Te=new je,xt=new tt(new Ht(1,16,16),Te);xt.position.setY(1);xt.castShadow=!0;zt.add(xt);const Jt=new tt(new Dt(15,15),Te);Jt.rotateX(-Math.PI/2);Jt.receiveShadow=!0;zt.add(Jt);const Ct=new fi({gravity:new c(0,-9.82,0)}),Pt=new Et("default"),zi=new bt(Pt,Pt,{friction:.8,restitution:.7});Ct.addContactMaterial(zi);const Ci=new Us(1),Ft=new F({mass:1,position:new c(0,4,0),shape:Ci,material:Pt});Ct.addBody(Ft);const Si=new $s,Pe=new F({type:F.STATIC,shape:Si,material:Pt});Pe.quaternion.setFromAxisAngle(new c(1,0,0),-Math.PI/2);Ct.addBody(Pe);const Yt=[],Ai=bi(zt,Ct,{onInit(q,t){console.log(q),t.visible=!1,Yt.push(t)}});Ne.add(Be,"CannonDebugger").name("CannonDebugger mesh visible").onChange(q=>{q?Yt.forEach(t=>{t.visible=!0}):Yt.forEach(t=>{t.visible=!1})});window.addEventListener("resize",()=>{wt.aspect=window.innerWidth/window.innerHeight,wt.updateProjectionMatrix(),at.setSize(window.innerWidth,window.innerHeight),at.setPixelRatio(window.devicePixelRatio)});const Fe=()=>{Ie.update(),Ct.fixedStep(),Ai.update(),xt.position.copy(Ft.position),xt.quaternion.copy(Ft.quaternion),at.render(zt,wt),requestAnimationFrame(Fe)};Fe();
